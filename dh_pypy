#! /usr/bin/python3
# vim: et ts=4 sw=4

# Copyright © 2013 Piotr Ożarowski <piotr@debian.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import logging
import os
import sys
from argparse import ArgumentParser, SUPPRESS
from os.path import exists, join
from shutil import copy as fcopy
from dhpython.debhelper import DebHelper
from dhpython.depends import Dependencies
from dhpython.interpreter import Interpreter, EXTFILE_RE
from dhpython.version import supported, default, VersionRange
from dhpython.pydist import validate as validate_pydist
from dhpython.fs import fix_locations, Scan
from dhpython.option import compiled_regex
from dhpython.tools import pyremove, parse_ns, remove_ns

# initialize script
logging.basicConfig(format='%(levelname).1s: dh_pypy '
                           '%(module)s:%(lineno)d: %(message)s')
log = logging.getLogger('dhpython')
os.umask(0o22)
DEFAULT = default('pypy')
SUPPORTED = supported('pypy')


class Scanner(Scan):
    def handle_ext(self, fpath):
        # PyPy doesn't include interpreter version in SONAME,
        # its ABI is stable so f.e. PyPy 4.0 has "pypy-26" in SONAME
        path, fname = fpath.rsplit('/', 1)
        soabi = EXTFILE_RE.search(fname)
        if soabi is None:
            return
        soabi = soabi.groupdict()['soabi']
        if soabi is None:
            return
        self.current_result.setdefault('ext_soabi', set()).add(soabi)
        return


def main():
    parser = ArgumentParser()
    parser.add_argument(
        '--version', action='version', version='%prog DEVELV')
    parser.add_argument(
        '--no-guessing-deps', action='store_false', dest='guess_deps',
        help='disable guessing dependencies')
    parser.add_argument(
        '--skip-private', action='store_true',
        help="don't check private directories")
    parser.add_argument(
        '-v', '--verbose', action='store_true',
        default=os.environ.get('DH_VERBOSE') == '1',
        help='turn verbose mode on')
    # arch=False->arch:all only, arch=True->arch:any only, None->all of them
    parser.add_argument(
        '-i', '--indep', action='store_false', dest='arch', default=None,
        help='act on architecture independent packages')
    parser.add_argument(
        '-a', '-s', '--arch', action='store_true', dest='arch',
        help='act on architecture dependent packages')
    parser.add_argument(
        '-q', '--quiet', action='store_false', dest='verbose', help='be quiet')
    parser.add_argument(
        '-p', '--package', action='append', metavar='PACKAGE',
        help='act on the package named PACKAGE')
    parser.add_argument(
        '-N', '--no-package', action='append', metavar='PACKAGE',
        help='do not act on the specified package')
    parser.add_argument(
        '--compile-all', action='store_true',
        help='compile all files from given private directory in postinst, not '
             'just the ones provided by the package')
    parser.add_argument(
        '-V', type=VersionRange, dest='vrange', metavar='[X.Y][-][A.B]',
        #help='specify list of supported PyPy versions. See pypycompile(1) for '
        #     'examples',
        help=SUPPRESS)
    parser.add_argument(
        '-X', '--exclude', action='append', dest='regexpr', type=compiled_regex,
        metavar='REGEXPR',
        help='exclude items that match given REGEXPR. You may use this option '
             'multiple times to build up a list of things to exclude.')
    parser.add_argument(
        '--accept-upstream-versions', action='store_true',
        help='accept upstream versions while translating Python dependencies '
             'into Debian ones')
    parser.add_argument(
        '--depends', action='append', metavar='REQ',
        help='translate given requirements into Debian dependencies and add '
             'them to ${pypy:Depends}. Use it for missing items in '
             'requires.txt.')
    parser.add_argument(
        '--depends-section', action='append', metavar='SECTION',
        help='translate requirements from given section into Debian '
             'dependencies and add them to ${python3:Depends}')
    parser.add_argument(
        '--recommends', action='append', metavar='REQ',
        help='translate given requirements into Debian dependencies and add '
             'them to ${pypy:Recommends}')
    parser.add_argument(
        '--recommends-section', action='append', metavar='SECTION',
        help='translate requirements from given section into Debian '
             'dependencies and add them to ${python3:Recommends}')
    parser.add_argument(
        '--suggests', action='append', metavar='REQ',
        help='translate given requirements into Debian dependencies and add '
             'them to ${pypy:Suggests}')
    parser.add_argument(
        '--suggests-section', action='append', metavar='SECTION',
        help='translate requirements from given section into Debian '
             'dependencies and add them to ${python3:Suggests}')
    parser.add_argument(
        '--requires', action='append', metavar='FILE',
        help='translate requirements from given file into Debian dependencies '
             'and add them to ${pypy:Depends}')
    parser.add_argument(
        '--namespace', action='append', dest='namespaces', metavar='NAMESPACE',
        help='recreate __init__.py files for given namespaces at install time')
    parser.add_argument(
        '--shebang', metavar='COMMAND',
        help='use given command as shebang in scripts')
    parser.add_argument(
        '--ignore-shebangs', action='store_true',
        help='do not translate shebangs into Debian dependencies')
    parser.add_argument(
        '--ignore-namespace', action='store_true',
        help="ignore Egg's namespace_packages.txt file and --namespace option")
    parser.add_argument(
        '--no-dbg-cleaning', action='store_false', dest='clean_dbg_pkg',
        help='do not remove files from debug packages')
    parser.add_argument(
        '--no-ext-rename', action='store_true',
        help='do not add magic tags nor multiarch tuples to extension file '
             'names)')
    parser.add_argument(
        '--no-shebang-rewrite', action='store_true',
        help='do not rewrite shebangs')
    parser.add_argument('private_dir', nargs='?',
        help='Private directory containing Python modules (optional)')
    # debhelper options:
    parser.add_argument('-O', action='append', help=SUPPRESS)

    options = parser.parse_args(os.environ.get('DH_OPTIONS', '').split()
                                + sys.argv[1:])
    if options.O:
        parser.parse_known_args(options.O, options)

    private_dir = options.private_dir
    if private_dir:
        if not private_dir.startswith('/'):
            # handle usr/share/foo dirs (without leading slash)
            private_dir = '/' + private_dir
    # TODO: support more than one private dir at the same time (see :meth:scan)
    if options.skip_private:
        private_dir = False

    if options.verbose:
        log.setLevel(logging.DEBUG)
        log.debug('version: DEVELV')
        log.debug('argv: %s', sys.argv)
        log.debug('options: %s', options)
        log.debug('supported PyPy versions: %s (default=%s)',
                  ','.join(str(v) for v in SUPPORTED), DEFAULT)
    else:
        log.setLevel(logging.INFO)

    try:
        dh = DebHelper(options, impl='pypy')
    except Exception as e:
        log.error('cannot initialize DebHelper: %s', e)
        exit(2)
    if not dh.packages:
        log.error('no package to act on (pypy-foo or one with ${pypy:Depends} in Depends)')
        # exit(7)
    if not options.vrange and dh.python_version:
        options.vrange = VersionRange(dh.python_version)

    interpreter = Interpreter('pypy')
    for package, pdetails in dh.packages.items():
        log.debug('processing package %s...', package)
        interpreter.debug = package.endswith('-dbg')

        if not private_dir:
            try:
                pyremove(interpreter, package, options.vrange)
            except Exception as err:
                log.error("%s.pyremove: %s", package, err)
                exit(5)
            fix_locations(package, interpreter, SUPPORTED, options)
        stats = Scanner(interpreter, package, private_dir, options).result

        dependencies = Dependencies(package, 'pypy', dh.build_depends)
        dependencies.parse(stats, options)

        if stats['ext_vers']:
            dh.addsubstvar(package, 'pypy:Versions',
                           ', '.join(str(v) for v in sorted(stats['ext_vers'])))
            ps = package.split('-', 1)
            if len(ps) > 1 and ps[0] == 'pypy':
                dh.addsubstvar(package, 'pypy:Provides',
                               ', '.join("pypy%s-%s" % (i, ps[1])
                               for i in sorted(stats['ext_vers'])))

        pypyclean_added = False  # invoke pypyclean only once in maintainer script
        if stats['compile']:
            args = ''
            if options.vrange:
                args += "-V %s" % options.vrange
            dh.autoscript(package, 'postinst', 'postinst-pypycompile', args)
            dh.autoscript(package, 'prerm', 'prerm-pypyclean', '')
            pypyclean_added = True
        for pdir, details in sorted(stats['private_dirs'].items()):
            if not details.get('compile'):
                continue
            if not pypyclean_added:
                dh.autoscript(package, 'prerm', 'prerm-pypyclean', '')
                pypyclean_added = True

            args = pdir

            ext_for = details.get('ext_vers')
            ext_no_version = details.get('ext_no_version')
            if ext_for is None and not ext_no_version:  # no extension
                shebang_versions = list(i.version for i in details.get('shebangs', [])
                                        if i.version and i.version.minor)
                if not options.ignore_shebangs and len(shebang_versions) == 1:
                    # only one version from shebang
                    args += " -V %s" % shebang_versions[0]
                elif options.vrange and options.vrange != (None, None):
                    args += " -V %s" % options.vrange
            elif ext_no_version:
                # at least one extension's version not detected
                if options.vrange and '-' not in str(options.vrange):
                    ver = str(options.vrange)
                else:  # try shebang or default PyPy version
                    ver = (list(i.version for i in details.get('shebangs', [])
                                if i.version and i.version.minor) or [None])[0] or DEFAULT
                dependencies.depend("pypy%s" % ver)
                args += " -V %s" % ver
            else:
                extensions = sorted(ext_for)
                vr = VersionRange(minver=extensions[0], maxver=extensions[-1])
                args += " -V %s" % vr

            for pattern in options.regexpr or []:
                args += " -X '%s'" % pattern.replace("'", r"'\''")

            dh.autoscript(package, 'postinst', 'postinst-pypycompile', args)

        dependencies.export_to(dh)

        pydist_file = join('debian', "%s.pydist" % package)
        if exists(pydist_file):
            if not validate_pydist(pydist_file):
                log.warning("%s.pydist file is invalid", package)
            else:
                dstdir = join('debian', package, 'usr/share/pypy/dist/')
                if not exists(dstdir):
                    os.makedirs(dstdir)
                fcopy(pydist_file, join(dstdir, package))

        # namespace feature - recreate __init__.py files at install time
        if options.ignore_namespace:
            nsp = None
        else:
            nsp = parse_ns(stats['nsp.txt'], options.namespaces)
        # note that pypycompile/pypyclean is already added to maintainer scripts
        # and it should remain there even if __init__.py was the only .py file
        if nsp:
            try:
                nsp = remove_ns(Interpreter('pypy'), package, nsp,
                                stats['public_vers'])
            except (IOError, OSError) as e:
                log.error('cannot remove __init__.py from package: %s', e)
                exit(6)
        if nsp:
            dstdir = join('debian', package, 'usr/share/pypy/ns/')
            if not exists(dstdir):
                os.makedirs(dstdir)
            with open(join(dstdir, package), 'a', encoding='utf-8') as fp:
                fp.writelines("%s\n" % i for i in sorted(nsp))

    dh.save()

if __name__ == '__main__':
    main()
